import numpy as np
import matplotlib.pyplot as plt
from util import coeffbandpass_filter, filtfilt, peaks_detection


class HeartRateDetector:
    def __init__(self):
        # channels
        self.chl_qrs = 9  # channel(s) used for qrs record
        
        # filter parameters
        self.f_stop_low = 4 # Hz
        self.f_pass_low = 5 # Hz
        self.f_pass_high = 24 # Hz
        self.f_stop_high = 25 # Hz
        self.n = 182 # ordre du filtre
        
        # Pan and Tompkins parameters
        self.threshold = 3 # minimun threshold for a heart peak

    def mean_peaks(self, mrange, r_peaks):
        """ Compute partial and global heart rate mean from the instantaneous
        heart rate array """
        if len(r_peaks) < mrange:
            return (-1, r_peaks)
        r_mean = np.mean(r_peaks)
        r_peaks_moy = r_peaks.copy()
        
        for i in range(1,mrange):
            sr_peaks_moy = np.concatenate([r_peaks[i:],np.ones(i)*r_peaks[-1]])
            r_peaks_moy = r_peaks_moy + sr_peaks_moy
        r_peaks_moy = r_peaks_moy/4
        
        return (r_mean, r_peaks_moy)

    def suppr_anormal_rate(self, r_peaks):
        """ Delete heart rate out of the range (40, 140) unit: bpm """
        
        rem_peaks = np.zeros(0)
        for val in r_peaks:
            if (val < 160 and val > 40):
                rem_peaks = np.append(rem_peaks, val)
        return rem_peaks
    
    def r_peaks_detection(self, data, fs):
        """ Load data in the buffer with load_data_from_txt before using this function """
        
        # Calcul des coeeficients du filtre passe bande
        # coefficient pour l1=4, l2=5, h1=24, h2=25, fs=128, n=182
        """bfilter = [0.00212600916574038, -0.00306702816335260, 0.00217285117125674, 0.00175388002838372,
         -0.00338213902480510, -0.00975274011069758, -0.0118461229491463, -0.00669150083159913,
         0.00225722428832919, 0.00777417086933906, 0.00623366193072022, 0.00135454822413509,
         -0.000383638980177628, 0.00268650039564095, 0.00600318800153932, 0.00504214736352380,
         0.00111230340808058, -0.000681849568574084, 0.00158103072109103, 0.00410015614412508,
         0.00260043900747000, -0.00174760457780328, -0.00383903439141697, -0.00160819835330347,
         0.00103945740106970, -0.000472580228505230, -0.00498252913887977, -0.00693768164723963,
         -0.00394322190013624, -0.000220361049526011, -0.000977912003929955, -0.00514494040980107,
         -0.00656435365587305, -0.00237161427185622, 0.00279207537212571, 0.00286358549898211,
         -0.00126404311888227, -0.00267469909346447, 0.00212689004123440, 0.00805852022264611,
         0.00803885227026544, 0.00274440503801229, 3.80458392069043e-05, 0.00429756256809237,
         0.0100186509039582, 0.00894504298519925, 0.00149138746453194, -0.00330591790587000,
         6.88019795619876e-05, 0.00569413570858198, 0.00389020531586080, -0.00531286191058538,
         -0.0115070898756251, -0.00777134994617187, -0.000540453389504605, -0.00132971782125110,
         -0.0107508139823577, -0.0168084744389650, -0.0108563053158297, 1.58811493322232e-06,
         0.00180518911089157, -0.00706159252660376, -0.0126667866540198, -0.00409188161477750,
         0.0107798943914790, 0.0147266158237506, 0.00469681844023782, -0.00280852068123023,
         0.00643427784826994, 0.0237208818286304, 0.0273986580619883, 0.0122856591755340,
         -0.00136747072790982, 0.00582481224080256, 0.0244042326460420, 0.0260830559746154,
         0.00201698662524736, -0.0217877319272598, -0.0170141384152677, 0.00638628782811912,
         0.00851703846233502, -0.0273981375866068, -0.0657515710859492, -0.0594541063239991,
         -0.0164249177602194, -0.00225655888366777, -0.0601637292451240, -0.138656089954234,
         -0.126230915805082, 0.0266208216122754, 0.230813017551602, 0.325538378572927,
         0.230813017551602, 0.0266208216122754, -0.126230915805082, -0.138656089954234,
         -0.0601637292451240, -0.00225655888366777, -0.0164249177602194, -0.0594541063239991,
         -0.0657515710859492, -0.0273981375866068, 0.00851703846233502, 0.00638628782811912,
         -0.0170141384152677, -0.0217877319272598, 0.00201698662524736, 0.0260830559746154,
         0.0244042326460420, 0.00582481224080256, -0.00136747072790982, 0.0122856591755340,
         0.0273986580619883, 0.0237208818286304, 0.00643427784826994, -0.00280852068123023,
         0.00469681844023782, 0.0147266158237506, 0.0107798943914790, -0.00409188161477750,
         -0.0126667866540198, -0.00706159252660376, 0.00180518911089157, 1.58811493322232e-06,
         -0.0108563053158297, -0.0168084744389650, -0.0107508139823577, -0.00132971782125110,
         -0.000540453389504605, -0.00777134994617187, -0.0115070898756251, -0.00531286191058538,
         0.00389020531586080, 0.00569413570858198, 6.88019795619876e-05, -0.00330591790587000,
         0.00149138746453194, 0.00894504298519925, 0.0100186509039582, 0.00429756256809237,
         3.80458392069043e-05, 0.00274440503801229, 0.00803885227026544, 0.00805852022264611,
         0.00212689004123440, -0.00267469909346447, -0.00126404311888227, 0.00286358549898211,
         0.00279207537212571, -0.00237161427185622, -0.00656435365587305, -0.00514494040980107,
         -0.000977912003929955, -0.000220361049526011, -0.00394322190013624, -0.00693768164723963,
         -0.00498252913887977, -0.000472580228505230, 0.00103945740106970, -0.00160819835330347,
         -0.00383903439141697, -0.00174760457780328, 0.00260043900747000, 0.00410015614412508,
         0.00158103072109103, -0.000681849568574084, 0.00111230340808058, 0.00504214736352380,
         0.00600318800153932, 0.00268650039564095, -0.000383638980177628, 0.00135454822413509,
         0.00623366193072022, 0.00777417086933906, 0.00225722428832919, -0.00669150083159913,
         -0.0118461229491463, -0.00975274011069758, -0.00338213902480510, 0.00175388002838372,
         0.00217285117125674, -0.00306702816335260, 0.00212600916574038]"""
        
        if not bfilter in self.__dict__:
            bfilter = coeffbandpass_filter(self.f_stop_low, self.f_pass_low,
                                           self.f_pass_high, self.f_stop_high, fs, self.n)
        
        datadim = data.shape
        
        if len(datadim) > 1:
            # There is more than one channel
            if(datadim[1] > self.chl_qrs):
                data = data[:,self.chl_qrs]
            else:
                print('trop de signal, signal 2 pris')
                data = data[:, 2]
        
        # Filtrage
        data_len = data.shape[0]
        flt_data = filtfilt(data, data_len, bfilter)
        
        # Detection de pics
        (inter_peaks, pos_peaks) = peaks_detection(self, flt_data, fs, threshold=3, refract_delay=0.3)
        
        # suppression de la premiere mesure (fausse)
        inter_peaks = inter_peaks[1:]
        
        # Conversion to bpm
        inter_peaks[:] = [60/x for x in inter_peaks]
        print(inter_peaks)
        
        #r_peaks_rec = self.suppr_anormal_rate(r_peaks_rec)
        
        return inter_peaks
    
